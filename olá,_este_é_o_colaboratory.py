# -*- coding: utf-8 -*-
"""Olá,_este_é_o_Colaboratory.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17OdV1p0IoAkvt8qsvFGXCO7GMwW9QzSt
"""

def calcular_reacoes_apoio():
    tipo_apoio = input("Qual o tipo de apoio? (apoio/engastado): ")
    unidade_medida = input("Qual a unidade de medida? (kn/N): ")

    if tipo_apoio.lower() == "apoio":
        tipo_carga = input("É uma carga distribuída ou concentrada? ")
        if tipo_carga.lower() == "distribuida":
            peso_carga_por_metro = float(input("Informe o peso por metro da carga distribuída (em {}/m): ".format(unidade_medida)))
            comprimento_ponte = float(input("Informe o comprimento total da ponte (em metros): "))

            distribuida_na_meta = input("A carga distribuída está na metade da sessão? (s/n): ")
            if distribuida_na_meta.lower() == "s":
                comprimento_carga = comprimento_ponte / 2
            else:
                comprimento_carga = float(input("Informe o comprimento da carga distribuída (em metros): "))

            reacao_apoio = peso_carga_por_metro * comprimento_carga
            reacao_cada_lado = reacao_apoio

        elif tipo_carga.lower() == "concentrada":
            peso_carga = float(input("Informe o peso da carga concentrada (em {}): ".format(unidade_medida)))
            quantidade_cargas = int(input("Informe a quantidade de cargas concentradas: "))
            comprimento_ponte = float(input("Informe o comprimento total da ponte (em metros): "))
            reacao_apoio = (peso_carga * quantidade_cargas * comprimento_ponte) / 2
            reacao_cada_lado = reacao_apoio / comprimento_ponte
        else:
            print("Tipo de carga inválido!")
            return
    elif tipo_apoio.lower() == "engastado":
        tipo_carga = input("É uma carga distribuída ou concentrada? ")
        if tipo_carga.lower() == "distribuida":
            peso_carga_por_metro = float(input("Informe o peso por metro da carga distribuída (em {}/m): ".format(unidade_medida)))
            comprimento_ponte = float(input("Informe o comprimento total da ponte (em metros): "))

            distribuida_na_meta = input("A carga distribuída está na metade da sessão? (s/n): ")
            if distribuida_na_meta.lower() == "s":
                comprimento_carga = comprimento_ponte / 2
            else:
                comprimento_carga = float(input("Informe o comprimento da carga distribuída (em metros): "))

            reacao_apoio = peso_carga_por_metro * comprimento_carga
            reacao_cada_lado = reacao_apoio
        elif tipo_carga.lower() == "concentrada":
            peso_carga = float(input("Informe o peso da carga concentrada (em {}): ".format(unidade_medida)))
            quantidade_cargas = int(input("Informe a quantidade de cargas concentradas: "))
            comprimento_ponte = float(input("Informe o comprimento total da ponte (em metros): "))
            reacao_apoio = (peso_carga * quantidade_cargas * comprimento_ponte) / 4
            reacao_cada_lado = reacao_apoio / comprimento_ponte
        else:
            print("Tipo de carga inválido!")
            return
    else:
        print("Tipo de apoio inválido!")
        return

    if tipo_apoio.lower() == "apoio":
        if tipo_carga.lower() == "distribuida":
            print("A reação de apoio em cada ponto é: {} {}".format(reacao_cada_lado, unidade_medida))
            print("O somatório de momento é: {} {}".format(reacao_apoio, unidade_medida))
    if tipo_apoio.lower() == "apoio":
        if tipo_carga.lower() == "concentrada":
            print("O somatório de momento é: {} {}".format(reacao_apoio, unidade_medida))
            print("A reação de apoio em cada ponto é: {} {}".format(reacao_cada_lado, unidade_medida))
    if tipo_apoio.lower() == "engastado":
        if tipo_carga.lower() == "distribuida":
            print("O somatório de momento é: {} {}".format(reacao_cada_lado, unidade_medida))
            print("A reação de apoio em cada ponto é: {} {}".format(reacao_apoio, unidade_medida))
    if tipo_apoio.lower() == "engastado":
        if tipo_carga.lower() == "concentrada":
            print("O somatório de momento é: {} {}".format(reacao_apoio, unidade_medida))
            print("A reação de apoio em cada ponto é: {} {}".format(reacao_cada_lado, unidade_medida))
calcular_reacoes_apoio()